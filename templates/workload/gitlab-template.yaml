AWSTemplateFormatVersion: 2010-09-09
Description: Deploys GitLab cluster. (qs-1rpegts6r)

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W9002
        - W9003
        - W9004

Parameters:
# Infra Parameters
  DomainName:
    Type: String
  PublicDNS:
    Type: String
    AllowedValues: [Disabled, UseExisting, CreateNew]
  PublicHostedZoneId:
    Type: String
  CreateSslCertificate:
    Type: String
    AllowedValues: ['Yes', 'No']
  EnvironmentName:
    Type: String

# Network Parameters
  VPCID:
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: String
    Default: ''
  NodeGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

# Cluster Parameters
  KubeClusterName:
    Type: String
  OIDCIssuerURLWithoutProtocol:
    Type: String
  ConfigureContainerInsights:
    Type: String
    AllowedValues: ['Yes', 'No']
  ConfigureGrafana:
    Type: String
    AllowedValues: ['Yes', 'No']

# Database Parameters
  AuroraDBEngineVersion:
    Type: String
    MinLength: 4
    AllowedValues: [9.6.16, 9.6.17, 9.6.18, 9.6.19, 10.11, 10.12, 10.13, 10.14, 11.6, 11.7, 11.8, 11.9, 12.4]
  RDSDBEngineVersion:
    Type: String
    MinLength: 4
    AllowedValues:
      - 10.17
      - 10.18
      - 10.19
      - 10.20
      - 10.21
      - 11.12
      - 11.13
      - 11.14
      - 11.15
      - 11.16
      - 12.7
      - 12.8
      - 12.9
      - 12.10
      - 12.11
      - 13.3
      - 13.4
      - 13.5
      - 13.6
      - 13.7
      - 14.1
      - 14.2
      - 14.3
      - 14.4
  DBName:
    Type: String
    MinLength: 0
    MaxLength: 64
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBPraefectName:
    Type: String
    MinLength: 0
    MaxLength: 64
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBUserName:
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
  DBPort:
    Type: Number
    MinValue: 1150
    MaxValue: 65535
  AuroraDBInstanceClass:
    Type: String
  RDSDBInstanceClass:
    Type: String
  UsingAurora:
    Type: String
    AllowedValues: ['Yes', 'No']

# Object Storage Parameters
  ObjectStorageSSEAlgorithm:
    Type: String
    AllowedValues: [AES256, aws:kms]
  ObjectStorageKMSKeyID:
    Type: String
    AllowedPattern: ^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}|$
    ConstraintDescription: Must be a valid KMS key ID.

# Cache Parameters
  CacheMode:
    Type: String
    AllowedValues: [BuiltIn, External]
  CacheNodes:
    Type: Number
  CacheNodeType:
    Type: String

# SMTP Parameters
  SMTPDomain:
    Type: String
    AllowedValues: [Disabled, CreateNew, UseExisting]
  SMTPHostName:
    Type: String
  SMTPPort:
    Type: Number
  SMTPUsername:
    Type: String
  SMTPPassword:
    Type: String
  DefaultSESPort:
    Type: Number
    Default: 587

# GitLab Parameters
  HelmChartNamespaceCreate:
    Type: String
    AllowedValues: [CreateNew, UseExisting]
  HelmChartNamespace:
    Type: String
  HelmChartName:
    Type: String
  HelmChartVersion:
    Type: String
  GitLabVersion:
    Type: String
  BackupSchedule:
    Type: String
  BackupVolumeSize:
    Type: Number
  NumberOfPraefectReplicas:
    Type: Number
  NumberOfGitalyReplicas:
    Type: Number
  GitalyVolumeSize:
    Type: Number

  PraefectInstanceType:
    Type: String
  GitalyInstanceType:
    Type: String
  LatestAmazonLinuxAmi:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
     - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
     - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  PraefectPort:
    Type: Number
    Default: 2305
  GitalyPort:
    Type: Number
    Default: 8075
  IngressProxyBodySize:
    Type: String
    Default: 1024m

# GitLab Runner Parameters
  ConfigureRunner:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
  RunnerChartName:
    Type: String
  RunnerChartVersion:
    Type: String
  RunnerImage:
    Type: String
  MaximumConcurrentJobs:
    Type: Number
  PrivilegedMode:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]

# Quickstart location Parameters
  QSS3BucketName:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  QSS3BucketRegion:
    Type: String
  QSS3KeyPrefix:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z-/]*$

Conditions:
  Using3AvailabilityZones:  !Not [!Equals [!Ref PrivateSubnet3ID, '']]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, aws-quickstart]
  ConfigureContainerInsights: !Equals [!Ref ConfigureContainerInsights, 'Yes']
  ConfigureGrafana: !Equals [!Ref ConfigureGrafana, 'Yes']
  OutgoingEmailEnabled: !Not [!Equals [!Ref SMTPDomain, Disabled]]
  CreateEmailDomain: !Equals [!Ref SMTPDomain, CreateNew]
  HostedZoneInUse: !Not [!Equals  [!Ref PublicDNS, Disabled]]
  AcmIngressConfigured: !And [!Equals [!Ref CreateSslCertificate, 'Yes'], !Condition HostedZoneInUse]
  HelmChartNamespaceCreate: !Equals [!Ref HelmChartNamespaceCreate, CreateNew]
  CreateCacheCluster: !Equals [!Ref CacheMode, External]
  ConfigureRunner: !Equals [!Ref ConfigureRunner, 'Yes']
  PrivilegedMode: !Equals [!Ref PrivilegedMode, 'Yes']

Mappings:
  PartitionMap:
    aws:
      IngressImageRepository: k8s.gcr.io/defaultbackend-amd64
    aws-us-gov:
      IngressImageRepository: k8s.gcr.io/defaultbackend-amd64
    aws-cn:
      IngressImageRepository: registry.aliyuncs.com/google_containers/defaultbackend

Resources:

  Functions:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-functions-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix

  GitLabShellToken:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt Functions.Outputs.RandomStringFunctionArn
      Length: 64 # https://docs.gitlab.com/charts/installation/secrets.html#gitlab-shell-secret
  PraefectInternalToken:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt Functions.Outputs.RandomStringFunctionArn
      Length: 64 # https://docs.gitlab.com/charts/installation/secrets.html#praefect-secret
  PraefectExternalToken:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt Functions.Outputs.RandomStringFunctionArn
      Length: 64 # https://docs.gitlab.com/charts/installation/secrets.html#praefect-secret
  RunnerRegistrationToken:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt Functions.Outputs.RandomStringFunctionArn
      Length: 64 # https://docs.gitlab.com/charts/installation/secrets.html#gitlab-runner-secret

  Telemetry:
    Type: AWS::CloudFormation::Stack
    Condition: ConfigureContainerInsights
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-telemetry-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !Ref KubeClusterName

  Infrastructure:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-infra-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        PraefectPort: !Ref PraefectPort
        DomainName: !Ref DomainName
        PublicDNS: !Ref PublicDNS
        PublicHostedZoneId: !Ref PublicHostedZoneId
        CreateEmailDomain: !If [CreateEmailDomain, 'Yes', 'No']
        CreateSslCertificate: !Ref CreateSslCertificate
        FunctionsBucketName: !GetAtt Functions.Outputs.FunctionsBucketName
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketRegion: !Ref QSS3BucketRegion
        EnvironmentName: !Ref EnvironmentName

  Cache:
    Type: AWS::CloudFormation::Stack
    Condition: CreateCacheCluster
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-cache-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VPCID: !Ref VPCID
        Subnet1ID: !Ref PrivateSubnet1ID
        Subnet2ID: !Ref PrivateSubnet2ID
        Subnet3ID: !Ref PrivateSubnet3ID
        IngressSecurityGroupId: !Ref NodeGroupSecurityGroup
        CacheNodes: !Ref CacheNodes
        CacheNodeType: !Ref CacheNodeType

  Database:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-database-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        Subnet1ID: !Ref PrivateSubnet1ID
        Subnet2ID: !Ref PrivateSubnet2ID
        UsingAurora: !Ref UsingAurora
        AuroraDBEngineVersion: !Ref AuroraDBEngineVersion
        RDSDBEngineVersion: !Ref RDSDBEngineVersion
        AuroraDBInstanceClass: !Ref AuroraDBInstanceClass
        RDSDBInstanceClass: !Ref RDSDBInstanceClass
        DBName: !Ref DBName
        DBPraefectName: !Ref DBPraefectName
        DBUserName: !Ref DBUserName
        DBPort: !Ref DBPort
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        QSS3BucketRegion: !Ref QSS3BucketRegion

  Praefect:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-praefect-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        DomainName: !Ref DomainName
        DBHost: !GetAtt Database.Outputs.PraefectEndpointAddress
        DBPort: !Ref DBPort
        DBName: !Ref DBPraefectName
        DBUsername: !Sub '{{resolve:secretsmanager:${Database.Outputs.PraefectSecretName}:SecretString:username}}'
        DBUserPassword: !Sub '{{resolve:secretsmanager:${Database.Outputs.PraefectSecretName}:SecretString:password}}'
        VPCID: !Ref VPCID
        PraefectSubnetIds: !If
          - Using3AvailabilityZones
          - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ] ]
          - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ] ]
        PraefectSecurityGroup: !GetAtt Infrastructure.Outputs.PraefectSecurityGroupID
        GitLabVersion: !Ref GitLabVersion
        GitLabShellToken: !GetAtt GitLabShellToken.Value
        PraefectInternalToken: !GetAtt PraefectInternalToken.Value
        PraefectExternalToken: !GetAtt PraefectExternalToken.Value
        PraefectAMIId: !Ref LatestAmazonLinuxAmi
        PraefectInstanceType: !Ref PraefectInstanceType
        PraefectReplicasCount: !Ref NumberOfPraefectReplicas
        PraefectPort: !Ref PraefectPort
        GitalyPort: !Ref GitalyPort

  Gitaly:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-gitaly-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        DomainName: !Ref DomainName
        PrivateHostedZoneId: !GetAtt Infrastructure.Outputs.PrivateHostedZoneId
        TlsCA: !GetAtt PostInstall.Outputs.RootCA
        GitalySubnetIds: !If
          - Using3AvailabilityZones
          - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ] ]
          - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ] ]
        GitalySecurityGroup: !GetAtt Infrastructure.Outputs.PraefectSecurityGroupID
        GitLabVersion: !Ref GitLabVersion
        GitLabShellToken: !GetAtt GitLabShellToken.Value
        PraefectInternalToken: !GetAtt PraefectInternalToken.Value
        GitalyAMIId: !Ref LatestAmazonLinuxAmi
        GitalyInstanceType: !Ref GitalyInstanceType
        GitalyReplicasCount: !Ref NumberOfGitalyReplicas
        GitalyPort: !Ref GitalyPort
        GitVolumeSize: !Ref GitalyVolumeSize
        FunctionsBucketName: !GetAtt Functions.Outputs.FunctionsBucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix

  ObjectStorage:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-storage-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        SSEAlgorithm: !Ref ObjectStorageSSEAlgorithm
        KMSKeyID: !Ref ObjectStorageKMSKeyID
        EnvironmentName: !Ref EnvironmentName
        HelmChartNamespace: !Ref HelmChartNamespace
        OIDCIssuerURLWithoutProtocol: !Ref OIDCIssuerURLWithoutProtocol
        DeleteBucketContentsFunctionArn: !GetAtt Functions.Outputs.DeleteBucketContentsFunctionArn
        DeleteBucketContentsRoleName: !GetAtt Functions.Outputs.DeleteBucketContentsRoleName

  ChartNamespace:
    Type: AWSQS::Kubernetes::Resource
    Condition: HelmChartNamespaceCreate
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref KubeClusterName
      Namespace: default
      Manifest: !Sub |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${HelmChartNamespace}
          labels:
            name: ${HelmChartNamespace}

  NewChartNamespaceWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: HelmChartNamespaceCreate
    DependsOn: ChartNamespace

  ExistingChartNamespaceWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  ChartNamespaceWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [HelmChartNamespaceCreate, !Ref NewChartNamespaceWaitHandle, !Ref ExistingChartNamespaceWaitHandle]
      Timeout: 1
      Count: 0

  KubeSecrets:
    Type: AWS::CloudFormation::Stack
    DependsOn: [Database, ChartNamespaceWaitCondition]
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-secrets-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        KubeClusterName: !Ref KubeClusterName
        HelmChartNamespace: !Ref HelmChartNamespace
        HelmChartName: !Ref HelmChartName
        DatabasePassword: !Sub '{{resolve:secretsmanager:${Database.Outputs.DatabaseSecretName}:SecretString:password}}'
        RegistryBucket: !GetAtt ObjectStorage.Outputs.RegistryBucket
        SmtpPassword: !If
          - CreateEmailDomain
          - !Sub '{{resolve:secretsmanager:${Infrastructure.Outputs.SmtpCredentialsSecretName}:SecretString:password}}'
          - !If [OutgoingEmailEnabled, !Ref SMTPPassword, '']
        GitLabShellSecretValue: !GetAtt GitLabShellToken.Value
        GitLabGitalySecretValue: !GetAtt PraefectExternalToken.Value
        RunnerTokenSecretValue: !GetAtt RunnerRegistrationToken.Value

  Chart:
    Type: AWSQS::Kubernetes::Helm
    Metadata: { cfn-lint: { config: { ignore_checks: [I3042] } } }
    Properties:
      ClusterID: !Ref KubeClusterName
      Namespace: !Ref HelmChartNamespace
      Repository: https://charts.gitlab.io/
      Chart: gitlab/gitlab
      Name: !Ref HelmChartName
      Version: !Ref HelmChartVersion

      ValueYaml: !Sub
        - |
          global:
            gitaly:
              external:
                - name: default
                  hostname: ${Praefect.Outputs.LoadBalancerDnsName}
                  port: ${PraefectPort}
            psql:
              load_balancing:
                hosts:
                  - ${Database.Outputs.GitLabReadEndpointAddress}
          gitlab:
            webservice:
              ingress:
                # Enable large project imports: https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2151
                proxyBodySize: ${IngressProxyBodySize}
                annotations:
                  nginx.ingress.kubernetes.io/proxy-body-size: ${IngressProxyBodySize}
              serviceAccount:
                annotations:
                  eks.amazonaws.com/role-arn: ${ServiceAccountRoleArn}
            toolbox:
              serviceAccount:
                annotations:
                  eks.amazonaws.com/role-arn: ${ServiceAccountRoleArn}
            sidekiq:
              serviceAccount:
                annotations:
                  eks.amazonaws.com/role-arn: ${ServiceAccountRoleArn}
          registry:
            serviceAccount:
              annotations:
                eks.amazonaws.com/role-arn: ${ServiceAccountRoleArn}
          nginx-ingress:
            controller:
              service:
                annotations:
                  service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
                  service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "ssl"
                  service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${SslCertificateArn}"
                # Deploy internal load balancer
                internal:
                  enabled: true
                  annotations:
                    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
              config:
                ssl-ciphers: ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
        - SslCertificateArn: !If [AcmIngressConfigured, !GetAtt Infrastructure.Outputs.SslCertificateArn, '']
          ServiceAccountRoleArn: !GetAtt ObjectStorage.Outputs.ServiceAccountRoleArn
      Values:
        # domain name
        global.hosts.domain: !Ref DomainName

        # security
        # Config that only applies to the defaults on initial install
        # see for additional details: https://gitlab.com/gitlab-org/gitlab-foss/-/issues/66124
        global.appConfig.initialDefaults.signupEnabled: false

        # Enable service accounts (see ValueYaml above for service accounts annotations).
        # We are using default SA names but provide them explicitly (they are also used in the trust policy for the SA role).
        global.serviceAccount.enabled: true
        global.serviceAccount.create: true
        gitlab.webservice.serviceAccount.name: gitlab-webservice
        gitlab.sidekiq.serviceAccount.name: gitlab-sidekiq
        gitlab.toolbox.serviceAccount.name: gitlab-toolbox
        gitlab.registry.serviceAccount.name: gitlab-registry

        # Self signed TLS certs by default - see https://docs.gitlab.com/charts/installation/tls.html
        certmanager.install: false
        global.ingress.configureCertmanager: false

        global.ingress.enabled: true
        nginx-ingress.defaultBackend.image.repository:
          !FindInMap [PartitionMap, !Ref AWS::Partition, IngressImageRepository]

        # telemetry configuration
        global.grafana.enabled: !If [ConfigureGrafana, true, false]

        # email configuration
        global.email.display_name: GitLab
        global.email.from: !Sub gitlab@${DomainName}
        global.email.reply_to: !Sub noreply@${DomainName}
        global.smtp.enabled: !If [OutgoingEmailEnabled, true, false]
        global.smtp.domain: !Ref DomainName
        global.smtp.starttls_auto: true
        global.smtp.authentication: login
        global.smtp.address:
          !If [CreateEmailDomain, !Sub 'email-smtp.${AWS::Region}.amazonaws.com', !Ref SMTPHostName]
        global.smtp.port:
          !If [CreateEmailDomain, !Ref DefaultSESPort, !Ref SMTPPort]
        global.smtp.user_name:
          !If [CreateEmailDomain, !Sub '{{resolve:secretsmanager:${Infrastructure.Outputs.SmtpCredentialsSecretName}:SecretString:username}}', !Ref SMTPUsername]
        global.smtp.password.secret:
          !If [OutgoingEmailEnabled, !GetAtt KubeSecrets.Outputs.SmtpSecretName, !Ref AWS::NoValue]
        global.smtp.password.key:
          !If [OutgoingEmailEnabled, !GetAtt KubeSecrets.Outputs.SmtpSecretKey, !Ref AWS::NoValue]

        # runner configuration
        gitlab-runner.install: false

        # cache configuration
        ## external redis settings
        redis.install:
          !If [CreateCacheCluster, false, true]
        global.redis.host:
          !If [CreateCacheCluster, !GetAtt Cache.Outputs.CacheEndpoint, !Ref AWS::NoValue]
        global.redis.scheme:
          !If [CreateCacheCluster, rediss, !Ref AWS::NoValue]
        global.redis.password.enabled:
          !If [CreateCacheCluster, false, !Ref AWS::NoValue]
        ## built-in redis settings
        redis.cluster.enabled:
          !If [CreateCacheCluster, !Ref AWS::NoValue, true]
        redis.cluster.slaveCount:
          !If [CreateCacheCluster, !Ref AWS::NoValue, !Ref CacheNodes]

        # database configuration
        postgresql.install: false
        global.psql.host: !GetAtt Database.Outputs.GitLabEndpointAddress
        global.psql.database: !Ref DBName
        global.psql.username: !Ref DBUserName
        global.psql.password.secret: !GetAtt KubeSecrets.Outputs.DatabaseKubeSecretName
        global.psql.password.key: !GetAtt KubeSecrets.Outputs.DatabaseSecretKey

        # Praefect/Gitaly configuration
        global.gitaly.enabled: false

        # S3 storage configuration
        ## object storage
        global.minio.enabled: false
        global.appConfig.object_store.enabled: true
        global.appConfig.object_store.proxy_download: true
        global.appConfig.object_store.storage_options.server_side_encryption: AES256
        global.appConfig.object_store.connection.secret: !GetAtt KubeSecrets.Outputs.ObjectStorageKubeSecretName
        global.appConfig.object_store.connection.key: !GetAtt KubeSecrets.Outputs.ConnectionSecretKey
        global.appConfig.artifacts.bucket: !GetAtt ObjectStorage.Outputs.ArtifactsBucket
        global.appConfig.lfs.bucket: !GetAtt ObjectStorage.Outputs.LfsBucket
        global.appConfig.uploads.bucket: !GetAtt ObjectStorage.Outputs.UploadsBucket
        global.appConfig.packages.bucket: !GetAtt ObjectStorage.Outputs.PackagesBucket
        global.appConfig.terraformState.bucket: !GetAtt ObjectStorage.Outputs.TerraformBucket
        global.appConfig.pseudonymizer.bucket: !GetAtt ObjectStorage.Outputs.PseudonymizerBucket
        global.appConfig.backups.bucket: !GetAtt ObjectStorage.Outputs.BackupBucket
        global.appConfig.backups.tmpBucket: !GetAtt ObjectStorage.Outputs.BackupTempBucket
        ## registry
        global.registry.bucket: !GetAtt ObjectStorage.Outputs.RegistryBucket
        registry.storage.secret: !GetAtt KubeSecrets.Outputs.ObjectStorageKubeSecretName
        registry.storage.key: !GetAtt KubeSecrets.Outputs.RegistrySecretKey

        # backups, see https://docs.gitlab.com/charts/backup-restore/backup.html
        gitlab.toolbox.persistance.enabled: true
        gitlab.toolbox.persistance.storageClass: gp2
        gitlab.toolbox.persistance.size: !Sub ${BackupVolumeSize}Gi
        gitlab.toolbox.backups.cron.enabled: true
        gitlab.toolbox.backups.cron.schedule: !Sub ${BackupSchedule}
        gitlab.toolbox.backups.cron.extraArgs: --skip registry --skip uploads --skip artifacts --skip lfs --skip packages --skip terraform_state
        gitlab.toolbox.backups.cron.persistance.enabled: true
        gitlab.toolbox.backups.cron.persistance.storageClass: gp2
        gitlab.toolbox.backups.cron.persistance.size: !Sub ${BackupVolumeSize}Gi
        gitlab.toolbox.backups.objectStorage.config.secret: !GetAtt KubeSecrets.Outputs.ObjectStorageKubeSecretName
        gitlab.toolbox.backups.objectStorage.config.key: !GetAtt KubeSecrets.Outputs.BackupSecretKey

        # webservice
        ## Adjust min replicas to match number of AZs
        gitlab.webservice.minReplicas: !If [Using3AvailabilityZones, 3, 2]

  PostInstall:
    Type: AWS::CloudFormation::Stack
    DependsOn: Chart
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-postinstall-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !Ref KubeClusterName
        HelmChartNamespace: !Ref HelmChartNamespace
        HelmChartName: !Ref HelmChartName
        DomainName: !Ref DomainName
        HostedZoneId: !If [HostedZoneInUse, !GetAtt Infrastructure.Outputs.HostedZoneId, '']
        PrivateHostedZoneId: !GetAtt Infrastructure.Outputs.PrivateHostedZoneId
        EnvironmentName: !Ref EnvironmentName
        ConfigureGrafana: !Ref ConfigureGrafana

  Runner:
    Type: AWS::CloudFormation::Stack
    Condition: ConfigureRunner
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/gitlab-runner-template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        ClusterName: !Ref KubeClusterName
        HelmChartNamespace: !Ref HelmChartNamespace
        HelmChartName: !Ref RunnerChartName
        HelmChartVersion: !Ref RunnerChartVersion
        DomainName: !Ref DomainName
        RunnerRegistrationToken: !GetAtt RunnerRegistrationToken.Value
        RunnerImage: !Ref RunnerImage
        TlsCASecretName: !GetAtt PostInstall.Outputs.RootCAChainSecretName
        MaximumConcurrentJobs: !Ref MaximumConcurrentJobs
        PrivilegedMode: !If [PrivilegedMode, 'true', 'false']
